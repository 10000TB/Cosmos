//
// Star rating control written in Swift for iOS.
//
// https://github.com/exchangegroup/Star
//
// This file was automatically generated by combining multiple Swift source files.
//


// ----------------------------
//
// TegStarFillMode.swift
//
// ----------------------------

import Foundation

/**

Defines how the star is filled when the rating is not an integer number. For example, if raiting is 4.6 and the fill more is Half, the star will appear to be half filled.

*/
public enum TegStarFillMode {
  /// Fill star according to decimal rating. For example, fourth star will be 20% filled for 3.2. By default the fill rate is not applied linearly but corrected (see correctFillLevelForPreciseMode setting).
  case Precise
  
  /// Show fully filled and half-filled stars. For example, fourth star will be half filled for 3.6.
  case Half
  
  /// Show only fully filled stars. For example, fourth star will be empty for 3.2.
  case Full
}


// ----------------------------
//
// TegStarRating.swift
//
// ----------------------------

import UIKit

class TegStarRating {
  class func createStarLayers(rating: Double, settings: TegStarRatingSettings) -> [CALayer] {

    var ratingRemander = numberOfFilledStars(rating)

    var starLayers = [CALayer]()

    for _ in (0..<settings.numberOfStars) {
      ratingRemander--

      let fillLevel = starFillLevel(ratingRemander, starFillMode: settings.starFillMode,
        correctFillLevelForPrecise: settings.correctFillLevelForPreciseMode)

      let starLayer = createCompositeStarLayer(fillLevel, settings: settings)
      starLayers.append(starLayer)
    }

    positionStarLayers(starLayers, marginBetweenStars: settings.marginBetweenStars)
    return starLayers
  }

  private class func createCompositeStarLayer(starFillLevel: Double,
    settings: TegStarRatingSettings) -> CALayer {

      if starFillLevel >= 1 {
        return createStarLayer(true, settings: settings)
      }

      if starFillLevel == 0 {
        return createStarLayer(false, settings: settings)
      }

      return createHalfStar(starFillLevel, settings: settings)
  }


  private class func createHalfStar(starFillLevel: Double, settings: TegStarRatingSettings) -> CALayer {
    let filledStar = createStarLayer(true, settings: settings)
    let emptyStar = createStarLayer(false, settings: settings)

    let parentLayer = CALayer()
    parentLayer.contentsScale = UIScreen.mainScreen().scale
    parentLayer.bounds = CGRect(origin: CGPoint(), size: filledStar.bounds.size)
    parentLayer.anchorPoint = CGPoint()
    parentLayer.addSublayer(emptyStar)
    parentLayer.addSublayer(filledStar)

    // make filled layer width smaller according to fill level
    filledStar.bounds.size.width *= CGFloat(starFillLevel)

    return parentLayer
  }

  // Returns a number between 0 and 1 describing the star fill level.
  // 1 is a fully filled star. 0 is an empty star. 0.5 is a half-star.
  private class func starFillLevel(ratingRemainder: Double, starFillMode: TegStarFillMode,
    correctFillLevelForPrecise: Bool) -> Double {

      var result = ratingRemainder + 1
      if result > 1 {
        result = 1
      } else if result < 0 {
        result = 0
      }

      if starFillMode == TegStarFillMode.Precise && correctFillLevelForPrecise {
        result = correctFillLevelToCompensateForTheFactThatStarIsNotOneHundredPercentWide(result)
      }

      if starFillMode == TegStarFillMode.Full {
        result = Double(round(result))
      }

      if starFillMode == TegStarFillMode.Half {
        result = Double(round(result * 2) / 2)
      }

      return result
  }

  private class func correctFillLevelToCompensateForTheFactThatStarIsNotOneHundredPercentWide(fillLevel: Double) -> Double {
    if fillLevel >= 0 && fillLevel <= 1 {
      return 3.0 / 5.0 * fillLevel + 1.0 / 5.0
    }

    return fillLevel
  }

  private class func createStarLayer(isFilled: Bool, settings: TegStarRatingSettings) -> CALayer {
    let text = isFilled ? settings.starCharacterFilled : settings.starCharacterEmpty
    let color = isFilled ? settings.starColorFilled : settings.starColorEmpty

    return TegStarRatingLayerHelper.createTextLayer(text, font:settings.starFont, color: color)
  }

  private class func numberOfFilledStars(rating: Double) -> Double {
    if rating > 5 { return 5 }
    if rating < 0 { return 0 }

    return rating
  }

  private class func positionStarLayers(layers: [CALayer], marginBetweenStars: CGFloat) {
    var positionX:CGFloat = 0

    for layer in layers {
      layer.position.x = positionX
      positionX += layer.bounds.width + marginBetweenStars
    }
  }
}


// ----------------------------
//
// TegStarRatingLayerHelper.swift
//
// ----------------------------

import UIKit

class TegStarRatingLayerHelper {
  class func createTextLayer(text: String, font: UIFont, color: UIColor) -> CATextLayer {
    let size = NSString(string: text).sizeWithAttributes([NSFontAttributeName: font])
    
    let layer = CATextLayer()
    layer.bounds = CGRect(origin: CGPoint(), size: size)
    layer.anchorPoint = CGPoint()
    
    layer.string = text
    layer.font = CGFontCreateWithFontName(font.fontName)
    layer.fontSize = font.pointSize
    layer.foregroundColor = color.CGColor
    layer.contentsScale = UIScreen.mainScreen().scale
    
    return layer
  }
}


// ----------------------------
//
// TegStarRatingSettings.swift
//
// ----------------------------

import UIKit

/**

Settings that define the appearance of the star rating views.

*/
public struct TegStarRatingSettings {
  init() {}
  
  /// The maximum number of start to be shown
  public var numberOfStars = 5
  
  /**

  Defines how the star should appear to be filled when the rating value is not an integer value.

  */
  public var starFillMode = TegStarFillMode.Half
  
  /// Distance between stars expressed. The value is automatically calculated based on marginBetweenStarsRelativeToFontSize property and the font size.
  var marginBetweenStars:CGFloat = 0
  
  /**

  Distance between stars expressed as a fraction of the font size. For example, if the font size is 12 and the value is 0.25 the distance will be 4.

  */
  public var marginBetweenStarsRelativeToFontSize = 0.1
  
  /// The font used to draw the star character
  public var starFont = UIFont.preferredFontForTextStyle(UIFontTextStyleBody)
  
  /// Character used to show a filled star
  public var starCharacterFilled = "★"
  
  /// Character used to show an empty star
  public var starCharacterEmpty = "☆"
  
  /// Filled star color
  public var starColorFilled = UIColor(red: 1, green: 149/255, blue: 0, alpha: 1)
  
  /// Empty star color
  public var starColorEmpty = UIColor(red: 1, green: 149/255, blue: 0, alpha: 1)
  
  /// Font for the text
  public var textFont = UIFont.preferredFontForTextStyle(UIFontTextStyleFootnote)
  
  /// Color of the text
  public var textColor = UIColor.grayColor()
  
  /// Distance between the text and the star. The value is automatically calculated based on marginBetweenStarsAndTextRelativeToFontSize property and the font size.
  var marginBetweenStarsAndText: CGFloat = 0
  
  /**

  Distance between the text and the star expressed as a fraction of the font size. For example, if the font size is 12 and the value is 0.25 the margin will be 4.

  */
  public var marginBetweenStarsAndTextRelativeToFontSize = 0.25
  
  /**

  When true the fill level is corrected to appear more gradual for default characters ★ and ☆. Applied only for precise star fill level.

  */
  public var correctFillLevelForPreciseMode = true
}


// ----------------------------
//
// TegStarRatingSize.swift
//
// ----------------------------

import UIKit

class TegStarRatingSize {
  class func outerSize(layers: [CALayer]) -> CGSize {
    var size = CGSize()
    
    for layer in layers {
      if layer.frame.maxX > size.width {
        size.width = layer.frame.maxX
      }
      
      if layer.frame.maxY > size.height {
        size.height = layer.frame.maxY
      }
    }
    
    return size
  }
}


// ----------------------------
//
// TegStarRatingText.swift
//
// ----------------------------

//
//  Shows text to the right of the stars
//

import UIKit

class TegStarRatingText {
  class func createLayer(text: String, font: UIFont, color: UIColor) -> CALayer {
    let layer = TegStarRatingLayerHelper.createTextLayer(text, font: font, color: color)
    return layer
  }
  
  class func position(layer: CALayer, starsSize: CGSize, marginBetweenStarsAndText: CGFloat) {
    layer.position.x = starsSize.width + marginBetweenStarsAndText
    
    let yOffset = (starsSize.height - layer.bounds.height) / 2
    
    layer.position.y = yOffset
  }
}


// ----------------------------
//
// TegStarRatingView.swift
//
// ----------------------------

import UIKit

/*

A view that shows stars. It can be used to show customer rating for the products. An optional text can be supplied that is shown to the right from the stars.

Example:

   ratingView.show(rating: 4.3, text: "(132)")

*/
public class TegStarRatingView: UIView {
  public var settings = TegStarRatingSettings()
  private var size = CGSize()

  /**
  
  Shows the star raiting with an optional text label.
  
  Example:
  
      ratingView.show(rating: 4.3, text: "(132)")
  
  */
  public func show(rating rating: Double, text: String? = nil) {
    calculateMargins()
    
    var sublayers = TegStarRating.createStarLayers(rating, settings: settings)

    layer.sublayers = sublayers
    
    if let text = text {
      let numberLayer = TegStarRatingText.createLayer(text,
        font: settings.textFont, color: settings.textColor)
      
      let starsSize = TegStarRatingSize.outerSize(sublayers)
      
      TegStarRatingText.position(numberLayer, starsSize: starsSize,
        marginBetweenStarsAndText: settings.marginBetweenStarsAndText)
      
      layer.addSublayer(numberLayer)
      
      sublayers.append(numberLayer)
    }
    
    size = TegStarRatingSize.outerSize(sublayers) // used as intrinsic content size

    invalidateIntrinsicContentSize()
  }
  
  /// Calculate margins based on the font size.
  private func calculateMargins() {
    settings.marginBetweenStars = settings.starFont.pointSize *
      CGFloat(settings.marginBetweenStarsRelativeToFontSize)
    
    settings.marginBetweenStarsAndText = settings.textFont.pointSize *
      CGFloat(settings.marginBetweenStarsAndTextRelativeToFontSize)
  }
  
  override public func intrinsicContentSize() -> CGSize {
    return size
  }
}


